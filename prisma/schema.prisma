// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  name      String?
  hash      String
  hashedRt  String?
  isBlock   Boolean  @default(false)
  image     String?
  phone     String?

  passwordResetCode    String?
  passwordResetExpires DateTime?

  role    role?   @relation(fields: [role_id], references: [id])
  role_id String?

  cources AdminCourse[]

  @@map("users")
}

model AdminCourse {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@unique([userId, courseId])
}

model Image {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  imageName String  @unique
  unused    Boolean @default(true)

  @@map("images")
}

model role {
  id          String       @id @default(dbgenerated("gen_random_uuid()"))
  title       String       @unique
  permissions Permission[] @default([product_view])
  User        User[]

  @@map("roles")
}

enum Permission {
  product_create
  product_view
  product_update
  product_delete

  order_create
  order_view
  order_update
  order_delete

  user_create
  user_view
  user_update
  user_delete

  role_create
  role_view
  role_update
  role_delete

  @@map("permissions")
}

model Category {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image    String?
  title    String
  descr    String?
  isActive Boolean @default(false)
  order    Int?

  courses Course[]

  @@map("categories")
}

enum PaymentType {
  Free // tekin
  OneTime // umrbod foydalanish
  Monthly // 1 oylik kurs
  TwoMonth // 2 oylik kurs
  ThreeMonth // 3 oylik kurs
  SixMonth // 6 oylik kurs
  NineMonth // 9 oylik kurs
  OneYear // 12 oylik kurs
}

model Course {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image      String
  title      String
  descr      String
  authorName String?
  amount     Int?
  isActive   Boolean @default(false)
  order      Int?

  paymentType PaymentType

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  parts   Part[]
  viewers UserCourse[]
  authors AdminCourse[]

  @@map("courses")
}

model Part {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  descr String?
  order Int?

  course   Course   @relation(fields: [courseId], references: [id])
  courseId String
  lessons  Lesson[]

  @@map("parts")
}

model Lesson {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  video String?
  title String
  descr String?
  order Int?

  part   Part?   @relation(fields: [partId], references: [id])
  partId String?

  @@map("lessons")
}

// many to many, relation - user <=> course
model UserCourse {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())

  paymentType PaymentType
  dateStart   DateTime?
  dateEnd     DateTime?

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@unique([clientId, courseId])
}

model Client {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  firstname String?
  lastname  String?
  hash      String?
  hashedRt  String?
  isBlock   Boolean  @default(false)

  verificationCode        String?
  verificationCodeExpires DateTime?
  isEmailVerified         Boolean   @default(false)

  passwordResetCode    String?
  passwordResetExpires DateTime?

  role       RoleClient?  @relation(fields: [role_id], references: [id])
  role_id    String?
  UserCourse UserCourse[]

  @@map("clients")
}

model RoleClient {
  id          String             @id @default(dbgenerated("gen_random_uuid()"))
  title       String             @unique
  permissions PermissionClient[] @default([product_view])

  Client Client[]

  @@map("roles_client")
}

enum PermissionClient {
  product_create
  product_view
  product_update
  product_delete

  order_create
  order_view
  order_update
  order_delete

  @@map("permissions_client")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image    String?
  email    String  @unique
  fullname String
  phone    String?
  hash     String
  hashedRt String?

  roles   Role[]       @default([User])
  courses UserCourse[]

  @@map("users")
}

// many to many, relation - user <=> course
model UserCourse {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  paymentType       PaymentType
  dateStart DateTime?
  dateEnd   DateTime?

  user   User @relation(fields: [userId], references: [id])
  userId Int

  course   Course @relation(fields: [courseId], references: [id])
  courseId Int

  @@unique([userId, courseId])
}

enum Role {
  Admin
  User
  Teacher
  StarAdmin

  @@map("roles")
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image String?
  title String  
  descr String?

  courses Course[]

  @@map("categories")
}


enum PaymentType {
  Free            // tekin
  OneTime         // umrbod foydalanish
  Monthly         // 1 oylik kurs
  TwoMonth        // 2 oylik kurs
  ThreeMonth      // 3 oylik kurs
  SixMonth        // 6 oylik kurs
  NineMonth       // 9 oylik kurs
  OneYear         // 12 oylik kurs
}

model Course {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image  String
  title  String 
  descr  String
  author String?
  amount Int?

  paymentType       PaymentType

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  parts   Part[]
  viewers UserCourse[]

  @@map("courses")
}

model Part {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 

  title String 
  descr String?

  course   Course?  @relation(fields: [courseId], references: [id])
  courseId Int?
  lessons  Lesson[]

  @@map("parts") 
}

model Lesson {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  video String?
  title String  
  descr String?

  part   Part? @relation(fields: [partId], references: [id])
  partId Int?

  @@map("lessons") 
}
